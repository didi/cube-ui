import{a as t,o as n,j as i}from"./index-e8a96955.js";const o={class:"markdown-body"},a=i(`<h2>Singleton Pattern</h2><p>You need to take the singleton and multiton pattern of components into account when invoking the component by API.</p><ul><li><p>After 1.11</p><p>If the component is singleton, then there will be only one instance when instantiating it multiple times <strong>in same component</strong>, and there is only one corresponding view layer; If the component is multiton, then a new instance will be created each time you instantiate it, and there are multiple corresponding view layers which don’t affect each other.</p></li><li><p>Below 1.11</p><p>If the component is singleton, then there will be only one instance when instantiating it multiple times, and there is only one corresponding view layer; If the component is multiton, then a new instance will be created each time you instantiate it, and there are multiple corresponding view layers which don’t affect each other.</p></li></ul><p>The components that are involved with api-invoking in cube-ui are all popups. Frequently used ones among them are listed below:</p><ul><li><a href="#/en-US/docs/toast">Toast</a></li><li><a href="#/en-US/docs/picker">Picker</a></li><li><a href="#/en-US/docs/time-picker">TimePicker</a></li><li><a href="#/en-US/docs/dialog">Dialog</a></li><li><a href="#/en-US/docs/action-sheet">ActionSheet</a></li></ul><p>All the api-invokings are implemented with the <code>createAPI</code> function exported by the <a href="#/en-US/docs/create-api">create-api</a> module. It is decided whether the component is singleton in definition. See details in <a href="#/en-US/docs/create-api">create-api</a>.</p><p>By default, Toast, Dialog and ActionSheet is singleton, while Picker and TimePicker is multiton because their scenes tend to be more complex with a lot of extra data processing. If you want to change the default behavior at the time of instantiation,you can modify the parameter of <code>$createX</code>. For example, we change the Dialog into multiton:</p><pre><code class="language-js">const dialog = this.$createDialog({
  type: &#39;confirm&#39;,
  title: &#39;title&#39;,
  content: &#39;content&#39;
}, false)
dialog.show()
</code></pre><p>In general cases, default behavior can meet the demand, except you have special need.</p><p><strong>Note:</strong> Considering the scenes of Picker and TimePicker, neither of them support singleton pattern.</p>`,10),c=[a],d={__name:"singleton",setup(s,{expose:e}){return e({frontmatter:{}}),(r,h)=>(n(),t("div",o,c))}};export{d as default};
